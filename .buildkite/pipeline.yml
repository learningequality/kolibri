steps:
  - label: Build Python packages
    command:
     - make docker-clean
     - mkdir -p dist
     - .buildkite/build_whl.sh

  - wait

  - trigger: "kolibri-macos"
    label: ":mac:"
    build: &triggered_build_attributes
      message: "${BUILDKITE_MESSAGE}"
      env:
        LE_TRIGGERED_FROM_BUILD_ID: "${BUILDKITE_BUILD_ID}"
        LE_TRIGGERED_FROM_JOB_ID: "${BUILDKITE_JOB_ID}"
        LE_GCS_UPLOAD_PATH_PREFIX: "${LE_GCS_UPLOAD_PATH_PREFIX}"

    # Android build only requires whl file
  # - label: Build Android APK
  #   env:
  #     KOLIBRI_ANDROID_BUILD_MODE: dev
  #   command: &android_build
  #     - .buildkite/build_apk.sh

  - label: Build Windows installer
    command: .buildkite/build_windows_installer.sh

  - label: Build Debian Packages
    command: .buildkite/build_debian_pkgs.sh
    key: deb-build

  - trigger: "kolibri-raspbian-image"
    label: ":raspberry-pi:"
    build: *triggered_build_attributes
    depends_on:
      - deb-build

  - wait

  # NOTE: Uploading artifacts should only happen once. Doing so twice during the
  # release process causes an error, which blocks the execution of the steps.
  - label: Upload artifacts
    command: .buildkite/setup_and_upload_artifact.sh

  - wait

  - label: Cleaning up
    command: make docker-clean

  - wait

  - block: "Create integration testing worksheet?"
  - label: Create integration testing
    command: .buildkite/build_worksheet.sh

  - block: "Sign Windows installer?"
  - label: Sign Windows installer
    command: .buildkite/sign_windows_installer.bat
    agents:
      queue: "windows-sign"

  # - block: "Build release APK?"
  # - label: "Build Release APK"
  #   env:
  #     KOLIBRI_ANDROID_BUILD_MODE: release
  #   command: *android_build

  - block: "Test .debs?"
  - label: Test on Trusty, Xenial, Bionic
    command:
     - mkdir -p dist
     - buildkite-agent artifact download 'dist/*.deb' dist/
     - make docker-deb-test
