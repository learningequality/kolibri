
.. _i18n:

Internationalization
====================

As a platform intended for use around the world, Kolibri has a strong mandate for translation and internationalization. As such, it has been designed with technologies to enable this built in.


Backend Translation
-------------------

For any strings in Django, we are using the standard Django i18n machinery (gettext and associated functions) to provide translations. See the `Django i18n documentation <https://docs.djangoproject.com/en/1.10/topics/i18n/>`_ for more information.


Frontend Translation
--------------------

For any strings in the frontend, we are using `Vue-Intl <https://www.npmjs.com/package/vue-intl>`_ an in house port of `React-intl <https://www.npmjs.com/package/react-intl>`_.

Within Kolibri, messages are defined on the body of the Vue component::

  - ``$trs``, an object of the form::

    {
      msgId: 'Message text',
    }

  - ``name``, we use the Vue component name to namespace the messages.

The ``name`` and all ``msgId``s should be in camelCase.

User visible strings should be rendered directly in the template with ``{{ $tr('msgId') }}``. These strings are collected during the build process, and bundled into exported JSON files. These files are then uploaded to Crowdin for translation.

An example Vue component would then look like this::

  <template>

    <div>
      <p>{{ $tr('exampleMessage') }}</p>
    </div>

  </template>


  <script>

    module.exports = {

      name: 'example',
      $trs: {
        exampleMessage: 'This message is just an example',
      },
    };

  </script>


  <style lang="stylus" scoped></style>

In order to translate strings outside of the scope of Vue components, i.e. in Javascript source files, the name space and messages object still need to be defined, as shown in this example::

  import { createTranslator } from 'kolibri.utils.i18n';

  const name = 'exampleTitles';

  const messages = {
    msgIdForThisMessage: 'This is a message',
  };

  const translator = createTranslator(name, messages);

  console.log(translator.$tr('msgIdForThisMessage'));

In this way, messages are namespaced, and then available off the ``$tr`` method of the translator object returned from the createTranslator function.

These messages will then be discovered for any registered plugins and loaded into the page if that language is set as the Django language. All language setting for the Frontend is based off the current Django language for the request.

.. new_language:
Adding a new language
---------------------

In order to add a new supported language to Kolibri, the appropriate language tuple must be added to the ``LANGUAGES`` variable in ``kolibri/deployment/default/settings/base.py``. In addition, the appropriate Intl polyfill file must be added to ``kolibri/core/assets/src/utils/import-intl-locale.js``.

