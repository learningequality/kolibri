[tox]
envlist = py{2.7,3.4,3.5,3.6,3.7,pypy}, pythonlint2, pythonlint3, pythonblack, frontendlint, node10.x, docs, node, postgres, pythonbuild{2.7,3.4,3.5,3.6,3.7}, cext, nocext

[testenv]
usedevelop = True
whitelist_externals=
    rm
    make
    sh
setenv =
    KOLIBRI_HOME = {envtmpdir}/.kolibri
    DJANGO_SETTINGS_MODULE = kolibri.deployment.default.settings.test
    KOLIBRI_RUN_MODE = tox
    SKIP_PY_CHECK = 1
basepython =
    pythonbuild2.7: python2.7
    pythonbuild3.4: python3.4
    pythonbuild3.5: python3.5
    pythonbuild3.6: python3.6
    pythonbuild3.7: python3.7
    licenses: python2.7
    py2.7: python2.7
    py3.4: python3.4
    py3.5: python3.5
    py3.6: python3.6
    py3.7: python3.7
    pypy: pypy
    docs: python3.5
    pythonlint2: python2.7
    pythonlint3: python3.6
    pythonblack: python3.6
    node10.x: python2.7
    frontendlint: python2.7
    nocext: python2.7
    cext: python2.7
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/cext.txt
commands =
    coverage run -p kolibri start --port=8081
    coverage run -p kolibri stop
    sh -c 'kolibri manage makemigrations --check'
    # Run the actual tests
    py.test {posargs:--cov=kolibri --cov-report= --cov-append --color=no}

# Running w/o C extensions is slow, so we just do a
# limited amount of testing
# This briefly tests our static deps etc w/o cexts
[testenv:nocext]
passenv = TOX_ENV
setenv =
     PYTHONPATH = "{toxinidir}:{toxinidir}/kolibri/dist"
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/build.txt
commands =
    # Ensure that for this Python version, we can actually compile ALL files
    # in the kolibri directory
    python -m compileall -q kolibri -x py2only
    # Until we have staged builds, we will be running this in each and every
    # environment even though builds should be done in Py 2.7
    make staticdeps
    # Start and stop kolibri
    coverage run -p kolibri start --port=8081
    coverage run -p kolibri stop
    # Run just tests in test/
    py.test --cov=kolibri --cov-report= --cov-append --color=no test/

# This briefly tests our static deps etc WITH cexts
[testenv:cext]
passenv = TOX_ENV
setenv =
     PYTHONPATH = "{toxinidir}:{toxinidir}/kolibri/dist"
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/build.txt
commands =
    # Ensure that for this Python version, we can actually compile ALL files
    # in the kolibri directory
    python -m compileall -q kolibri -x py2only
    # Until we have staged builds, we will be running this in each and every
    # environment even though builds should be done in Py 2.7
    make staticdeps
    make staticdeps-cext
    # Start and stop kolibri
    coverage run -p kolibri start --port=8081
    coverage run -p kolibri stop
    # Run just tests in test/
    py.test --cov=kolibri --cov-report= --cov-append --color=no test/

[testenv:postgres]
passenv = TOX_ENV
setenv =
    PYTHONPATH = {toxinidir}
    KOLIBRI_HOME = {envtmpdir}/.kolibri
    DJANGO_SETTINGS_MODULE = kolibri.deployment.default.settings.postgres_test
    KOLIBRI_RUN_MODE = tox
basepython =
    postgres: python3.5
deps =
    -r{toxinidir}/requirements/test.txt
    -r{toxinidir}/requirements/base.txt
    -r{toxinidir}/requirements/cext.txt
    -r{toxinidir}/requirements/postgres.txt
commands =
    py.test {posargs:--cov=kolibri --color=no}
    # rm -rf {env:KOLIBRI_HOME}

[testenv:pythonlint2]
deps =
    -r{toxinidir}/requirements/dev.txt
commands =
    flake8 kolibri

[testenv:pythonlint3]
deps =
    -r{toxinidir}/requirements/dev.txt
commands =
    flake8 kolibri

[testenv:pythonblack]
commands =
    yarn
    npm rebuild node-sass
    yarn run fmt-backend:check

[testenv:docs]
deps =
    -r{toxinidir}/requirements/docs.txt
commands =
    make docs

[node_base]
whitelist_externals =
    yarn
    npm
commands =
    yarn
    # Node-sass gets mardy if we don't do this.
    npm rebuild node-sass
    yarn run coverage

[testenv:node10.x]
whitelist_externals = {[node_base]whitelist_externals}
commands = {[node_base]commands}

[testenv:frontendlint]
whitelist_externals = {[node_base]whitelist_externals}
commands =
    yarn
    # Node-sass gets mardy if we don't do this.
    npm rebuild node-sass
    yarn run lint-frontend

[conditional_testing_base]
whitelist_externals =
    {toxinidir}/test/if.sh

[python_build_base]
commands =
    {toxinidir}/test/if.sh "setup_changed"

[testenv:pythonbuild2.7]
whitelist_externals = {[conditional_testing_base]whitelist_externals}
commands = {[python_build_base]commands}

[testenv:pythonbuild3.4]
whitelist_externals = {[conditional_testing_base]whitelist_externals}
commands = {[python_build_base]commands}

[testenv:pythonbuild3.5]
whitelist_externals = {[conditional_testing_base]whitelist_externals}
commands = {[python_build_base]commands}

[testenv:pythonbuild3.6]
whitelist_externals = {[conditional_testing_base]whitelist_externals}
commands = {[python_build_base]commands}

[testenv:licenses]
whitelist_externals = {[conditional_testing_base]whitelist_externals}
commands =
    {toxinidir}/test/if.sh "requirements_changed"
