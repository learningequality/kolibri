name: Build WHL file

on:
  workflow_call:
    outputs:
      whl-file-name:
        description: "WHL file name"
        value: ${{ jobs.build_whl.outputs.whl-file-name }}
      tar-file-name:
        description: "TAR file name"
        value: ${{ jobs.build_whl.outputs.tar-file-name }}

jobs:
  build_whl:
    name: Build WHL
    runs-on: ubuntu-20.04
    container:
      image: python:2.7.18-buster
    outputs:
      whl-file-name: ${{ steps.get-whl-filename.outputs.whl-file-name }}
      tar-file-name: ${{ steps.get-tar-filename.outputs.tar-file-name }}
    steps:
    - name: Install Git LFS
      run: |
        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
        apt-get install git-lfs
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    - name: Install Ubuntu dependencies
      run: |
        apt-get -y -qq update
        apt-get install -y gettext sudo
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16.x'
    - name: Install Yarn
      run: npm install -g yarn
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install Javascript dependencies
      run: |
        yarn --frozen-lockfile
        npm rebuild node-sass
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache C extensions
      uses: actions/cache@v3
      with:
        path: cext_cache
        key: ${{ runner.os }}-cext-${{ hashFiles('requirements/cext*.txt') }}
        restore-keys: |
          ${{ runner.os }}-cext-
    - name: Install Python build dependencies
      run: pip install -r requirements/build.txt
    - name: Build Kolibri
      run: make dist
    - name: Get WHL filename
      id: get-whl-filename
      run: echo "whl-file-name=$(ls dist | grep .whl | cat)" >> $GITHUB_OUTPUT
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.get-whl-filename.outputs.whl-file-name }}
        path: dist/${{ steps.get-whl-filename.outputs.whl-file-name }}
    - name: Get TAR filename
      id: get-tar-filename
      run: echo "tar-file-name=$(ls dist | grep .tar | cat)" >> $GITHUB_OUTPUT
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.get-tar-filename.outputs.tar-file-name }}
        path: dist/${{ steps.get-tar-filename.outputs.tar-file-name }}
